stages:
  - build
  - docker
  - release
  - deploy

before_script:
  - mkdir -p ~/.docker/ && echo "$DOCKER_AUTH_CONFIG" > ~/.docker/config.json
  - export TAG="${CI_COMMIT_REF_SLUG}-${CI_COMMIT_SHA:0:8}"
  - export CI_SHORT_REF_NAME=$CI_COMMIT_REF_SLUG
  - export DOCKER_REGISTRY_IMAGE=$DOCKER_REGISTRY_PREFIX/fe

build_fe:
  image: node:8-alpine
  stage: build
  script:
    - npm install
    - npm run build || true
  cache:
    key: "${CI_SHORT_REF_NAME}-fe"
    paths:
      - .npm/
      - node_modules/
  artifacts:
    name: "${TAG}-fe"
    expire_in: 1 week
    when: on_success
    paths:
      - build/
  tags:
    - docker

build_docker_fe:
  image: docker:stable
  stage: docker
  script:
    - cp -f ci/Dockerfile.fe ./
    - mkdir -p /etc/docker/certs.d/$DOCKER_REGISTRY && echo "$DOCKER_REGISTRY_SSL" > /etc/docker/certs.d/$DOCKER_REGISTRY/ca.crt
    - docker login -u $DOCKER_REGISTRY_USER -p $DOCKER_REGISTRY_PASS $DOCKER_REGISTRY
    - docker pull $DOCKER_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG || true
    - docker build --rm -t $DOCKER_REGISTRY_IMAGE:$CI_COMMIT_SHA -f Dockerfile.fe .
    - docker push $DOCKER_REGISTRY_IMAGE:$CI_COMMIT_SHA
    - docker logout $DOCKER_REGISTRY
  tags:
    - docker

release:
  image: docker:stable
  stage: release
  script:
    - docker login -u $DOCKER_REGISTRY_USER -p $DOCKER_REGISTRY_PASS $DOCKER_REGISTRY
    - docker pull $DOCKER_REGISTRY_IMAGE:$CI_COMMIT_SHA
    - docker tag $DOCKER_REGISTRY_IMAGE:$CI_COMMIT_SHA $DOCKER_REGISTRY_IMAGE:$TAG
    - docker tag $DOCKER_REGISTRY_IMAGE:$CI_COMMIT_SHA $DOCKER_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
    - docker push $DOCKER_REGISTRY_IMAGE:$TAG
    - docker push $DOCKER_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
    - docker logout $DOCKER_REGISTRY
  tags:
    - docker

.deploy_ansible:
  image: $ANSIBLE_IMAGE
  stage: deploy
  variables:
    GIT_STRATEGY: none
  script:
    - mkdir -p ~/.ssh/
    - echo -e "Host *\n\rStrictHostKeyChecking no\n\n" > ~/.ssh/config
    - echo "$CURRENT_DEPLOYMENT_KEY" | tr -d '\r' > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - eval $(ssh-agent -s)
    - ssh-add ~/.ssh/id_rsa
    - git clone $DEPLOYMENT_REPO ~/deploy
    - cd ~/deploy
    - echo $ANSIBLE_VAULT_PASSWORD > vault.key
    - ansible-playbook -i environments/${CURRENT_DEPLOYMENT_ENV}/inventory deploy.yaml --extra-vars "fe_version=$TAG be_version=$CI_SHORT_REF_NAME bot_fe_version=$CI_SHORT_REF_NAME bot_version=$CI_SHORT_REF_NAME"
  tags:
    - docker

deploy_dev:
  variables:
    CURRENT_DEPLOYMENT_ENV: "dev"
    CURRENT_DEPLOYMENT_KEY: "$DEPLOYMENT_DEV_KEY"
  only:
    - develop
  environment:
    name: $CURRENT_DEPLOYMENT_ENV
    url: http://track-dev.docker.nordclan
  extends: .deploy_ansible

deploy_test:
  variables:
    CURRENT_DEPLOYMENT_ENV: "test"
    CURRENT_DEPLOYMENT_KEY: "$DEPLOYMENT_DEV_KEY"
  only:
    - test
  when: manual
  environment:
    name: $CURRENT_DEPLOYMENT_ENV
    url: http://track-test.docker.nordclan
  extends: .deploy_ansible

deploy_to_prod:
  image: $ANSIBLE_IMAGE
  stage: deploy
  variables:
    CURRENT_DEPLOYMENT_KEY: "$PROD_DEPLOYMENT_KEY"
    CURRENT_DEPLOYMENT_ENV: "prod"
  script:
    - mkdir -p ~/.ssh/
    - echo -e "Host *\n\rStrictHostKeyChecking no\n\n" > ~/.ssh/config
    - echo "$CURRENT_DEPLOYMENT_KEY" | tr -d '\r' > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - eval $(ssh-agent -s)
    - ssh-add ~/.ssh/id_rsa
    - git clone $DEPLOYMENT_REPO ~/deploy
    - cd ~/deploy
    - echo $ANSIBLE_VAULT_PASSWORD > vault.key
    - ansible-playbook -i environments/${CURRENT_DEPLOYMENT_ENV}/inventory deploy.yaml --extra-vars "fe_version=$TAG bot_fe_version=$CI_SHORT_REF_NAME be_version=$CI_SHORT_REF_NAME bot_version=$CI_SHORT_REF_NAME"
  only:
    - master
  tags:
    - docker
  when: manual
  environment:
    name: prod
    url: http://track.nordclan/
